Index: ../src/kile.kcfg
===================================================================
--- ../src/kile.kcfg	(Revision 963971)
+++ ../src/kile.kcfg	(Arbeitskopie)
@@ -552,5 +552,9 @@
 			<label>Clear the list of the most frequently used symbols whilst closing Kile.</label>
 			<default>false</default>
 		</entry>
+		<entry name="symbolViewUTF8" type="Bool">
+		<label>Should UTF-8 characters instead of commands be inserted</label>
+		<default>false</default>
+		</entry>
 	</group>
 </kcfg>
Index: ../src/kile.h
===================================================================
--- ../src/kile.h	(Revision 963971)
+++ ../src/kile.h	(Arbeitskopie)
@@ -292,12 +292,16 @@
 	* warns if latex packages in pkgs are not included in the document 
 	**/
 	void insertTag(const KileAction::TagData& td, const QStringList& pkgs);
+	
 	/**
 	 * An overloaded member function, behaves essentially as above.
 	 **/
+	
+	void insertTag(const KileAction::TagData& td, const QList<Package>& pkgs);
 	void insertTag(const QString& tagB, const QString& tagE, int dx, int dy);
 	void insertAmsTag(const KileAction::TagData& td);
 	void insertText(const QString &text, const QStringList &pkgs);
+	void insertText(const QString &text, const QList<Package> &pkgs);
 
 	void quickTabular();
 	void quickArray();
Index: ../src/symbolviewclasses.h
===================================================================
--- ../src/symbolviewclasses.h	(Revision 0)
+++ ../src/symbolviewclasses.h	(Revision 0)
@@ -0,0 +1,35 @@
+#ifndef SYMBOLVIEWCLASSES_H
+#define SYMBOLVIEWCLASSES_H
+
+#include <QtCore/QObject>
+#include <QtCore/QString>
+
+struct Preamble{
+   QString className;
+   QString classArguments;
+   QString additional;
+};
+
+struct Package{
+   QString name;
+   QString arguments;
+};
+
+struct Command{
+   QString latexCommand;
+   QString unicodeCommand;
+   QString ImageCommand;
+   QString comment;
+   bool mathMode;
+   QList<Package> packages;
+   QList<Package> unicodePackages;
+   int referenceCount;
+   QString path;
+};
+
+struct Version{
+   QString major;
+   QString minor;
+};
+
+#endif //SYMBOLVIEWCLASSES_H
Index: ../src/widgets/symbolview.cpp
===================================================================
--- ../src/widgets/symbolview.cpp	(Revision 963971)
+++ ../src/widgets/symbolview.cpp	(Arbeitskopie)
@@ -1,7 +1,7 @@
 /****************************************************************************************
     begin                : Fri Aug 1 2003
     copyright            : (C) 2003 by Jeroen Wijnhout (Jeroen.Wijnhout@kdemail.net)
-                               2006 - 2007 by Thomas Braun
+                               2006 - 2009 by Thomas Braun
  ****************************************************************************************/
 
 /***************************************************************************
@@ -43,6 +43,8 @@
 
 #include "kileconfig.h"
 #include "kiledebug.h"
+#include "../symbolviewclasses.h"
+#include "symbolview.h"
 
 #define MFUS_GROUP "MostFrequentlyUsedSymbols"
 #define MFUS_PREFIX "MFUS"
@@ -73,35 +75,67 @@
 {
 }
 
+/* key format
+from old symbols with package info
+1%\textonequarter%%%{textcomp}%%/home/kdedev/.kde4/share/apps/kile/mathsymbols/misc-text/img072misc-text.png
+from old symbols without package info
+1%\oldstylenums{9}%%%%%/home/kdedev/.kde4/share/apps/kile/mathsymbols/misc-text/img070misc-text.png
+new symbol
+1%\neq%≠%[utf8x,,]{inputenc,ucs,}%[fleqn,]{amsmath,}%This command gives nice weather!%/home/kdedev/.kde4/share/apps/kile/mathsymbols/user/img002math.png
+*/
+
 void SymbolView::extract(const QString& key, int& refCnt)
 {
-	if (!key.isEmpty()) {
-		refCnt = key.section('%', 0, 0).toInt();
-	}
+   if (!key.isEmpty()) {
+	refCnt = key.section('%', 0, 0).toInt();
+   }
+}
 
-	return;
+void SymbolView::extractPackageString(const QString&string, QList<Package> &packages){
+
+  QRegExp rePkgs("(?:\\[(.*)\\])?\\{(.*)\\}");
+  QStringList args,pkgs;
+  Package pkg;
+  
+  if(string.isEmpty()){
+      return;
+   }
+   
+   packages.clear();
+   
+   if ( rePkgs.exactMatch(string) ){
+      args = rePkgs.cap(1).split(',');
+      pkgs = rePkgs.cap(2).split(',');
+   }
+   else{
+      return;
+   }
+   
+   for(int i = 0 ; i <  pkgs.count() && i < args.count() ; i++){
+      pkg.name = pkgs.at(i);
+      pkg.arguments = args.at(i);
+      packages.append(pkg);
+   }
+   
 }
 
-void SymbolView::extract(const QString& key, int& refCnt, QString &cmd, QStringList &args, QStringList &pkgs)
+void SymbolView::extract(const QString& key, Command &cmd)
 {
 	if (key.isEmpty()) {
 		return;
 	}
 
-	extract(key, refCnt);
+	QStringList contents = key.split('%');
+	QString packages;
+	
+	cmd.referenceCount = contents.at(0).toInt();
+	cmd.latexCommand = contents.at(1);
+	cmd.unicodeCommand = contents.at(2);
 
-	QRegExp rePkgs("(?:\\[(.*)\\])?\\{(.*)\\}");
-
-	args.clear();
-	pkgs.clear();
-
-	cmd = key.section('%', 1, 1);
-	QString text = key.section('%', 2, 2);
-
-	if (text.indexOf(rePkgs) != -1) {
-		args = rePkgs.cap(1).split(',',QString::SkipEmptyParts);
-		pkgs = rePkgs.cap(2).split(',',QString::SkipEmptyParts);
-	}
+	extractPackageString(contents.at(3),cmd.unicodePackages);
+	extractPackageString(contents.at(4),cmd.packages);
+	cmd.comment = contents.at(5);
+	cmd.path = contents.at(6);
 }
 
 void SymbolView::initPage(int page)
@@ -159,72 +193,117 @@
 
 QString SymbolView::getToolTip(const QString &key)
 {
-	QString cmd, label;
+	QString label;
 	QStringList pkgs, args;
-	int refCnt;
+	Command cmd;
+	Package pkg;
 
-	extract(key, refCnt, cmd, args, pkgs);
+	extract(key, cmd);
 
-	label = i18n("Command: ") + cmd + '\n';
-
-	if(pkgs.count() > 0) {
-		if(pkgs.count() == 1) {
+	 label = "<b>" + i18n("Command: ") + cmd.latexCommand + "</b><br>";
+	 if(!cmd.unicodeCommand.isEmpty()) {
+	    label += i18n("Unicode command: ") + cmd.unicodeCommand + "<br>";
+	 }
+	
+	if(cmd.packages.count() > 0) {
+	        if(cmd.packages.count() == 1) {
 			label += i18n("Package: ");
 		}
 		else {
 			label += i18n("Packages: ");
 		}
 
-		for (int i = 0; i < pkgs.count() ; i++) {
-			if(i < args.count()) {
-				label = label + '[' + args[i] + ']' + pkgs[i] + '\n';
-			}
-			else {
-				label = label + pkgs[i] + '\n';
-			}
+		for (int i = 0; i < cmd.packages.count() ; i++) {
+		     pkg = cmd.packages.at(i);
+		     if(!pkg.arguments.isEmpty()) {
+			label += '[' + pkg.arguments + ']' + pkg.name;
+		     }
+		     else {
+			label += pkg.name;
+		     }
+		     if( i != ( cmd.packages.count() - 1 ) ){
+			label += "<br>";
+		     }
 		}
 	}
+	
+	if(!cmd.comment.isEmpty()) {
+	   label += "<i>" + i18n("Comment: ") + cmd.comment + "</i>";
+	}
 
 	return label;
 }
 
 void SymbolView::mousePressEvent(QMouseEvent *event)
 {
+	Command cmd;
 	QString code_symbol;
-	QStringList args, pkgs;
+	QList<Package> packages; 
 	QListWidgetItem *item = NULL;
-	int count;
 	bool math = false, bracket = false;
 
 	if(event->button() == Qt::LeftButton && (item = itemAt(event->pos()))) {
 		bracket = event->modifiers() & Qt::ControlModifier;
 		math = event->modifiers() & Qt::ShiftModifier;
 
-		extract(item->data(Qt::UserRole).toString(), count, code_symbol, args, pkgs);
+		extract(item->data(Qt::UserRole).toString(), cmd);
+		if(KileConfig::symbolViewUTF8()){
+		  code_symbol = cmd.unicodeCommand;
+		  packages = cmd.unicodePackages;
+		}
+		else{
+		   code_symbol = cmd.latexCommand;
+		   packages = cmd.packages;
+		}
 
 		if(math != bracket) {
 			if(math) {
 				code_symbol = '$' + code_symbol + '$';
 			}
-			else {
-				if(bracket) {
+			else if(bracket) {
 					code_symbol = '{' + code_symbol + '}';
 				}
-			}
 		}
-		emit(insertText(code_symbol, pkgs));
+		emit(insertText(code_symbol, packages));
 		emit(addToList(item));
 	}
 
 	KILE_DEBUG() << "math is " << math << ", bracket is " << bracket << " and item->data(Qt::UserRole).toString() is " << (item ? item->data(Qt::UserRole).toString() : "");
 }
 
+QString convertLatin1StringtoUTF8(const QString &string ){
+
+   if(string.isEmpty()){ 
+      return QString();
+   }
+   
+   QVector<uint> stringAsIntVector;
+   QStringList stringList = string.split(",",QString::SkipEmptyParts);
+   
+   QStringList::const_iterator it;
+   QString str;
+   bool ok;
+   int stringAsInt;
+   for(it = stringList.begin(); it != stringList.end(); it++) {
+	 str = *it;
+	 str.remove("U+");
+	 stringAsInt = str.toInt(&ok);
+	 if(!ok) {
+	    return QString();
+	 }
+	 stringAsIntVector.append(stringAsInt);
+   }
+   return QString::fromUcs4(stringAsIntVector.data(),stringAsIntVector.count());
+   
+}
+
 void SymbolView::fillWidget(const QString& prefix)
 {
 	KILE_DEBUG() << "===SymbolView::fillWidget(const QString& " << prefix <<  " )===";
 	QImage image;
 	QListWidgetItem* item;
-	QStringList refCnts, paths;
+	QStringList refCnts, paths, unicodeValues;
+	QString key;
 
 	if (prefix == MFUS_PREFIX) {
 		KConfigGroup config = KGlobal::config()->group(MFUS_GROUP);
@@ -250,7 +329,16 @@
 		if(image.load(paths[i])) {
 //      		KILE_DEBUG() << "path is " << paths[i];
 			item = new QListWidgetItem(this);
-			QString key = refCnts[i] + '%' + image.text("Command") + '%' + image.text("Packages") + '%' + paths[i];
+
+			key = refCnts[i] + '%' + image.text("Command");
+			key += '%' + convertLatin1StringtoUTF8(image.text("CommandUnicode"));
+			key += '%' + image.text("UnicodePackages");
+			key += '%' + image.text("Packages");
+			key += '%' + convertLatin1StringtoUTF8(image.text("Comment"));
+			key += '%' + paths[i];
+			
+// 			KILE_DEBUG() << "key is " << key;
+
 			item->setData(Qt::UserRole, key);
 			item->setToolTip(getToolTip(key));
 
@@ -278,9 +366,10 @@
 void SymbolView::writeConfig()
 {
 	QListWidgetItem *item;
-	QStringList paths, refCnts;
+	QStringList paths;
+	QList<int> refCnts;
+	Command cmd;
 
-
 	KConfigGroup grp = KGlobal::config()->group(MFUS_GROUP);
 
 	if (KileConfig::clearMFUS()) {
@@ -290,8 +379,9 @@
 	else {
 		for(int i = 0; i < count(); ++i) {
 			item = this->item(i);
-			refCnts.append(item->data(Qt::UserRole).toString().section('%', 0, 0));
-			paths.append(item->data(Qt::UserRole).toString().section('%', 3, 3));
+			extract(item->data(Qt::UserRole).toString(),cmd);
+			refCnts.append(cmd.referenceCount);
+			paths.append(cmd.path);
 			KILE_DEBUG() << "path=" << paths.last() << ", count is " << refCnts.last();
 		}
 		grp.writeEntry("paths", paths);
Index: ../src/widgets/symbolview.h
===================================================================
--- ../src/widgets/symbolview.h	(Revision 963971)
+++ ../src/widgets/symbolview.h	(Arbeitskopie)
@@ -2,7 +2,7 @@
     begin                : Fri Aug 1 2003
     copyright            : (C) 2002 - 2003 by Pascal Brachet
                                2003 Jeroen Wijnhout (Jeroen.Wijnhout@kdemail.net)
-                               2006 - 2007 Thomas Braun
+                               2006 - 2009 Thomas Braun
  ***************************************************************************************/
 
 /***************************************************************************
@@ -21,6 +21,7 @@
 
 #include <kcolorscheme.h>
 
+#include "../symbolviewclasses.h"
 class QMouseEvent;
 
 namespace KileWidget {
@@ -37,9 +38,9 @@
 
 	private:
 		void fillWidget(const QString &prefix);
-		//void contentsMousePressEvent(QMouseEvent *e);
-		void extract(const QString& key, int& count, QString &cmd, QStringList &args, QStringList &pkgs);
-		void extract(const QString& key, int& count);
+		void extractPackageString(const QString &string, QList<Package> &pkgs);
+		void extract(const QString& key, Command &cmd);
+		void extract(const QString& key, int& refCnt);
 		void initPage(int page);
 		QString getToolTip(const QString &key);
 
@@ -49,7 +50,7 @@
 		virtual void mousePressEvent(QMouseEvent *event);
 
 	Q_SIGNALS:
-		void insertText(const QString& text, const QStringList &pkgs);
+		void insertText(const QString& text, const QList<Package> &pkgs);
 		void addToList(const QListWidgetItem *item);
 
 	public Q_SLOTS:
Index: ../src/widgets/symbolviewconfigwidget.ui
===================================================================
--- ../src/widgets/symbolviewconfigwidget.ui	(Revision 963971)
+++ ../src/widgets/symbolviewconfigwidget.ui	(Arbeitskopie)
@@ -5,107 +5,136 @@
    <rect>
     <x>0</x>
     <y>0</y>
-    <width>421</width>
-    <height>180</height>
+    <width>404</width>
+    <height>227</height>
    </rect>
   </property>
   <property name="windowTitle" >
    <string>Symbol View</string>
   </property>
-  <layout class="QVBoxLayout" >
-   <item>
-    <widget class="QGroupBox" name="groupBox" >
-     <property name="sizePolicy" >
-      <sizepolicy vsizetype="Minimum" hsizetype="MinimumExpanding" >
-       <horstretch>0</horstretch>
-       <verstretch>0</verstretch>
-      </sizepolicy>
-     </property>
-     <property name="title" >
-      <string>Most Frequently Used Symbols</string>
-     </property>
-     <property name="flat" >
-      <bool>true</bool>
-     </property>
-     <layout class="QVBoxLayout" >
-      <item>
-       <widget class="QCheckBox" name="kcfg_displayMFUS" >
-        <property name="text" >
-         <string>Display the vie&amp;w</string>
-        </property>
-       </widget>
-      </item>
-      <item>
-       <layout class="QHBoxLayout" >
-        <item>
-         <widget class="QLabel" name="textLabel1" >
-          <property name="text" >
-           <string>Number of symbols to show</string>
-          </property>
-          <property name="wordWrap" >
-           <bool>false</bool>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="KIntNumInput" name="kcfg_numSymbolsMFUS" >
-          <property name="value" >
-           <number>30</number>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <spacer>
-          <property name="orientation" >
-           <enum>Qt::Horizontal</enum>
-          </property>
-          <property name="sizeHint" stdset="0" >
-           <size>
-            <width>40</width>
-            <height>20</height>
-           </size>
-          </property>
-         </spacer>
-        </item>
-       </layout>
-      </item>
-      <item>
-       <widget class="QCheckBox" name="kcfg_clearMFUS" >
-        <property name="sizePolicy" >
-         <sizepolicy vsizetype="Preferred" hsizetype="Preferred" >
-          <horstretch>0</horstretch>
-          <verstretch>0</verstretch>
-         </sizepolicy>
-        </property>
-        <property name="text" >
-         <string>&amp;Clear the list of symbols when closing Kile</string>
-        </property>
-       </widget>
-      </item>
-     </layout>
-    </widget>
-   </item>
-   <item>
-    <spacer>
-     <property name="orientation" >
-      <enum>Qt::Vertical</enum>
-     </property>
-     <property name="sizeHint" stdset="0" >
-      <size>
-       <width>403</width>
-       <height>21</height>
-      </size>
-     </property>
-    </spacer>
-   </item>
-  </layout>
+  <widget class="QWidget" name="layoutWidget" >
+   <property name="geometry" >
+    <rect>
+     <x>0</x>
+     <y>0</y>
+     <width>402</width>
+     <height>227</height>
+    </rect>
+   </property>
+   <layout class="QVBoxLayout" name="verticalLayout_3" >
+    <item>
+     <widget class="QGroupBox" name="groupBox" >
+      <property name="sizePolicy" >
+       <sizepolicy vsizetype="Minimum" hsizetype="MinimumExpanding" >
+        <horstretch>0</horstretch>
+        <verstretch>0</verstretch>
+       </sizepolicy>
+      </property>
+      <property name="title" >
+       <string>Most Frequently Used Symbols</string>
+      </property>
+      <property name="flat" >
+       <bool>true</bool>
+      </property>
+      <layout class="QVBoxLayout" name="verticalLayout_2" >
+       <item>
+        <widget class="QCheckBox" name="kcfg_displayMFUS" >
+         <property name="text" >
+          <string>Display the vie&amp;w</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <layout class="QHBoxLayout" >
+         <item>
+          <widget class="QLabel" name="textLabel1" >
+           <property name="text" >
+            <string>Number of symbols to show</string>
+           </property>
+           <property name="wordWrap" >
+            <bool>false</bool>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="KIntNumInput" name="kcfg_numSymbolsMFUS" >
+           <property name="value" >
+            <number>30</number>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <spacer>
+           <property name="orientation" >
+            <enum>Qt::Horizontal</enum>
+           </property>
+           <property name="sizeHint" stdset="0" >
+            <size>
+             <width>40</width>
+             <height>20</height>
+            </size>
+           </property>
+          </spacer>
+         </item>
+        </layout>
+       </item>
+       <item>
+        <widget class="QCheckBox" name="kcfg_clearMFUS" >
+         <property name="sizePolicy" >
+          <sizepolicy vsizetype="Fixed" hsizetype="Minimum" >
+           <horstretch>0</horstretch>
+           <verstretch>0</verstretch>
+          </sizepolicy>
+         </property>
+         <property name="text" >
+          <string>&amp;Clear the list of symbols when closing Kile</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </widget>
+    </item>
+    <item>
+     <widget class="QGroupBox" name="groupBox_2" >
+      <property name="title" >
+       <string>Unicode</string>
+      </property>
+      <property name="flat" >
+       <bool>true</bool>
+      </property>
+      <layout class="QVBoxLayout" name="verticalLayout" >
+       <item>
+        <widget class="QCheckBox" name="kcfg_symbolViewUTF8" >
+         <property name="text" >
+          <string>Insert UTF-8 characters instead of the command</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </widget>
+    </item>
+    <item>
+     <spacer>
+      <property name="orientation" >
+       <enum>Qt::Vertical</enum>
+      </property>
+      <property name="sizeHint" stdset="0" >
+       <size>
+        <width>400</width>
+        <height>18</height>
+       </size>
+      </property>
+     </spacer>
+    </item>
+   </layout>
+  </widget>
  </widget>
  <layoutdefault spacing="6" margin="11" />
  <pixmapfunction>qPixmapFromMimeSource</pixmapfunction>
  <customwidgets>
   <customwidget>
    <class>KIntNumInput</class>
-   <extends>QWidget</extends>
+   <extends></extends>
    <header>knuminput.h</header>
   </customwidget>
  </customwidgets>
Index: ../src/data/symbols-ng/gesymb-ng.cpp
===================================================================
--- ../src/data/symbols-ng/gesymb-ng.cpp	(Revision 0)
+++ ../src/data/symbols-ng/gesymb-ng.cpp	(Revision 0)
@@ -0,0 +1,337 @@
+/* 
+   License: 	GPLv2 or later
+   Author: 	Thomas Braun
+   date: 	8 mai 2009
+   description: converter from xml to png files for new file format
+*/
+
+#include <QDomDocument>
+#include <QFile>
+#include <QTextStream>
+#include <QDebug>
+#include <QList>
+#include <QTemporaryFile>
+#include <QImage>
+
+#include <iostream>
+#include <stdlib.h>
+
+#include "../../symbolviewclasses.h"
+
+/* TODO
+   - more error checking when parsing xml file
+*/
+
+void readImageComments(const QString &fileName)
+{
+   QImage image;
+   QString output;
+   
+   if(image.load(fileName)) {
+      qDebug() << QString("Image %1 has Command _%2_").arg(fileName).arg(image.text("Command"));
+      qDebug() << QString("Image %1 has Comment _%2_").arg(fileName).arg(image.text("Comment"));    
+      qDebug() << QString("image %1 has Package _%2_").arg(fileName).arg(image.text("Packages"));
+      qDebug() << QString("Image %1 has CommandUnicode _%2_").arg(fileName).arg(image.text("CommandUnicode"));
+      qDebug() << QString("Image %1 has UnicodePackages _%2_").arg(fileName).arg(image.text("UnicodePackages"));
+   }
+   else {
+      qDebug() << "===readComment=== ERROR " << fileName << " could not be loaded";
+   }
+}
+
+QString convertUTF8toLatin1String(const QString &string){
+
+   QVector<uint> stringAsInt;
+   QString stringAsLatin1;
+   
+   stringAsInt = string.toUcs4();
+   QVector<uint>::const_iterator it;
+   for(it = stringAsInt.begin(); it != stringAsInt.end(); it++) {
+      stringAsLatin1 += QString("U+%1,").arg(*it);
+   }
+   return stringAsLatin1;
+}
+
+QString pkgListToString(const QList<Package> &packages){
+   
+   QString packagesArg, packagesName;
+   
+   for(int i=0; i < packages.count() ; i++){
+      packagesArg  += packages[i].arguments + ",";
+      packagesName += packages[i].name + ",";
+   }
+   QString result = ( packagesArg.isEmpty() ? "" : '[' + packagesArg + ']' ) + ( packagesName.isEmpty() ? "" : '{' + packagesName + '}' );
+   return result;
+}
+
+void writeImageComments(const Command &cmd, const QString &fileName)
+{
+   
+   QImage image;
+   QString unicodeCommandAsLatin1, commentAsLatin1;
+   QString packagesarg, packages;
+   
+   if(!cmd.unicodeCommand.isEmpty()) {
+      unicodeCommandAsLatin1 = convertUTF8toLatin1String(cmd.unicodeCommand);
+   }
+   if(!cmd.comment.isEmpty()) {
+      commentAsLatin1 = convertUTF8toLatin1String(cmd.comment);
+   }
+
+   qDebug() << "fileName is " << fileName;
+   qDebug() << "Command is " << cmd.latexCommand;
+   qDebug() << "unicodeCommandAsLatin1 is " << unicodeCommandAsLatin1;
+   qDebug() << "commentAsLatin1 is " << commentAsLatin1;
+   qDebug() << "comment is " << cmd.comment; 
+   
+   if(image.load(fileName)) {
+      
+      image.setText("Command",cmd.latexCommand);    
+      if( !unicodeCommandAsLatin1.isEmpty() ) {
+	 image.setText("CommandUnicode",unicodeCommandAsLatin1);
+	 image.setText("UnicodePackages",pkgListToString(cmd.unicodePackages));
+      }
+      if (!commentAsLatin1.isEmpty() ) {
+	 image.setText("Comment",commentAsLatin1);
+      }
+      
+      image.setText("Packages",pkgListToString(cmd.packages));     
+      if(!image.save(fileName,"PNG")) {
+	 qDebug() << "Image " << fileName << " could not be saved";
+	 exit(1);
+      }
+   }
+   else {
+      qDebug() << "===writeComment=== ERROR " << fileName << "could not be loaded";
+   }
+   
+}
+
+QString generatePNG(QString latexFile, int index, QString symbolGroupName) {
+    
+   QString texfile, texfileWithoutSuffix,pngfile;
+   int latexret, dvipngret;
+
+   QTemporaryFile file("XXXXXX.tex");
+   file.setAutoRemove(false);
+   if (file.open()) {
+      QTextStream t(&file);
+      t.setCodec("UTF-8");
+      t << latexFile;
+      
+      texfile = file.fileName();
+      texfileWithoutSuffix = texfile.left(texfile.length() - 4);
+      pngfile = QString("img%1%2.png").arg(index,3,10,QChar('0')).arg(symbolGroupName);
+      qDebug() << texfile;
+      qDebug() << texfileWithoutSuffix;
+      qDebug() << pngfile;
+      
+      file.close();    
+   }
+
+   QString texcommand=QString("latex %1").arg(texfile);
+   QString dvipngcommand=QString("dvipng  --strict --picky --freetype -bg Transparent -x 518 -O -1.2in,-1.2in -T bbox -D 300 -o %1 %2.dvi").arg(pngfile).arg(texfileWithoutSuffix);
+   qDebug() << texcommand;
+   qDebug() << dvipngcommand;
+ 
+   latexret = system(texcommand.toLatin1());
+   dvipngret= system(dvipngcommand.toLatin1());
+   
+   if (latexret) {
+      qDebug() << "Error compiling the latex file";
+      return QString();
+   }
+   
+   if(dvipngret) { 
+      qDebug() << "Error producing the pngs";
+      return QString();
+   }
+   
+   return pngfile;
+}
+
+
+QString generateLatexFile(const Preamble &preamble, const Command &cmd)
+{
+   QString output;
+   Package pkg;
+   QString cmdString;
+   
+   output += QString("\\documentclass[%1]{%2}\n").arg(preamble.classArguments).arg(preamble.className);
+   output += "\n";
+   output += preamble.additional;
+   output += "\n";
+   
+   for(int i=0; i < cmd.packages.count(); i++){
+      pkg = cmd.packages[i];
+      if(pkg.arguments.isEmpty()) {
+	 output += QString("\\usepackage{%1}\n").arg(pkg.name);
+      }
+      else{
+	 output += QString("\\usepackage[%1]{%2}\n").arg(pkg.arguments).arg(pkg.name);
+      }
+   }
+   
+   output += "\\begin{document}\n";
+   output += "\n";
+   cmdString = !cmd.ImageCommand.isEmpty() ? cmd.ImageCommand : cmd.latexCommand;
+   output += cmd.mathMode ? QString("\\ensuremath{%1}\n").arg(cmdString) : QString("%1\n").arg(cmdString);
+   output += "\n";
+   output += "\\end{document}\n";
+   
+   return output;
+}
+
+QList<Package> getAllPackages(const QDomElement &e){
+
+   QList<Package> packages;
+   Package pkg;
+   QDomElement element;   
+   
+   if(e.isNull()){
+      return packages;
+   }
+      
+   QDomNodeList cmdNodes = e.childNodes();
+   
+   for(int i=0; i < cmdNodes.count();i++) {
+      element = cmdNodes.item(i).toElement();
+      if( element.tagName()== "package") {
+	 pkg.name = element.firstChildElement("name").text();
+	 pkg.arguments =  element.firstChildElement("arguments").text();
+	 packages.append(pkg);
+	 qDebug() << "pkg.name is " << pkg.name;
+	 qDebug() << "pkg.arguments is " << pkg.arguments;
+      }
+   }
+   return packages;
+}
+
+Command getCommandDefinition(const QDomElement &e, QList<Package> unicodePackages)
+{
+   if(e.isNull()) {
+      return Command();
+   }
+
+   Package pkg;
+   Command cmd;
+   
+   cmd.unicodePackages = unicodePackages;
+   cmd.packages = getAllPackages(e);
+   cmd.mathMode = e.firstChildElement("mathMode").text() == "true" ? true : false;
+   cmd.comment = e.firstChildElement("comment").text();
+   cmd.latexCommand = e.firstChildElement("latexCommand").text();
+   cmd.unicodeCommand = e.firstChildElement("unicodeCommand").text();
+   cmd.ImageCommand = e.firstChildElement("imageCommand").text();
+   
+   qDebug() << QString("cmd: latexCommand=%1, unicodeCommand=%2, imageCommand=%3, comment=%4, mathmode=%5").arg(cmd.latexCommand).arg(cmd.unicodeCommand).arg(cmd.ImageCommand).arg(cmd.comment).arg(cmd.mathMode);
+
+   if(cmd.packages.count() > 0 ){
+      qDebug() << "packages are";
+      for(int i=0; i < cmd.packages.count(); i++){
+	 qDebug() << QString("name=%1, arguments=%2").arg(cmd.packages[i].name).arg(cmd.packages[i].arguments);
+      }
+   }
+   else{
+      qDebug() << "no packages to include";  
+   }
+   
+   return cmd;
+}
+
+void usage(){
+
+   qDebug() << QString("usage: gesymb-ng mySymbols.xml");
+   exit(1);
+}
+
+int main(int argc, char** argv)
+{
+   Preamble preamble;
+   Version version;
+   QList<Command> commands;
+   QString symbolGroupName;
+   QList<Package> unicodePkgList;
+   
+   if(argc < 2){
+      usage();
+   }
+   QFile file( argv[1] );
+   
+  if( !file.open( QIODevice::ReadOnly ) ){
+    qDebug() << "could not open file";
+    return -1;
+  }
+
+  QString errorMsg;
+  int errorLine,errorColumn;
+  QDomDocument doc( "KileSymbolSources" );
+  
+  if( !doc.setContent( &file,false, &errorMsg, &errorLine, &errorColumn) )
+  {
+    qDebug() << "could not find xml content";
+    qDebug() << errorMsg;
+    qDebug() << "line is " << errorLine;
+    qDebug() << "column is " << errorColumn;
+    file.close();
+    return -2;
+  }
+  file.close();
+  
+  // check root element
+  QDomElement root = doc.documentElement();
+  if( root.tagName() != "symbols" ) {
+    qDebug() << "wrong format";
+    return -3;
+  }
+  
+  QDomNode n = root.firstChild();
+  while( !n.isNull() ) {
+    QDomElement e = n.toElement();
+    
+    if( e.isNull() ) {
+      n = n.nextSibling();  
+      continue;
+    }
+    qDebug() << "element name is " << e.tagName();
+    QString tagName = e.tagName();
+    
+    if( tagName == "formatVersion" ){
+      version.major = e.attribute("major");
+      version.minor = e.attribute("minor");
+    }
+    else if( tagName == "symbolGroupName" ){
+       symbolGroupName = e.text();
+    }
+    else if(tagName == "preamble"){
+      preamble.className = e.firstChildElement("class").text();
+      preamble.classArguments = e.firstChildElement("arguments").text();
+      preamble.additional= e.firstChildElement("additional").text();
+
+      qDebug() << "class is " << preamble.className;
+      qDebug() << "arguments is " << preamble.classArguments;
+      qDebug() << "additional is " << preamble.additional;
+      
+    }
+    else if( tagName == "unicodeCommandPackages") {
+       unicodePkgList = getAllPackages(e);
+    }
+    else if( tagName == "commandDefinition" ){
+       commands.append(getCommandDefinition(e,unicodePkgList));
+    }
+    else{
+       qDebug() << "unexpected node: " << tagName;
+    }
+      n = n.nextSibling();   
+    }
+    
+    QString content,pngfile;
+    for(int i=0; i < commands.count();i++) {
+       content = generateLatexFile(preamble,commands[i]);
+       qDebug() << content;
+       pngfile = generatePNG(content,i,symbolGroupName);
+       writeImageComments(commands[i],pngfile);
+       readImageComments(pngfile);
+    }
+       
+}
Index: ../src/data/symbols-ng/CMakeLists.txt
===================================================================
--- ../src/data/symbols-ng/CMakeLists.txt	(Revision 0)
+++ ../src/data/symbols-ng/CMakeLists.txt	(Revision 0)
@@ -0,0 +1,8 @@
+find_package(Qt4 REQUIRED)
+
+include_directories(${QT_INCLUDES} ${CMAKE_CURRENT_BINARY_DIR})
+
+set(gesymb-ng_SRCS gesymb-ng.cpp)
+qt4_automoc(${gesymb-ng_SRCS})
+add_executable(gesymb-ng EXCLUDE_FROM_ALL ${gesymb-ng_SRCS})
+target_link_libraries(gesymb-ng ${QT_QTCORE_LIBRARY} ${QT_QTXML_LIBRARY} ${QT_QTGUI_LIBRARY})
Index: ../src/data/symbols-ng/draft-version-symbolFormat.xml
===================================================================
--- ../src/data/symbols-ng/draft-version-symbolFormat.xml	(Revision 965181)
+++ ../src/data/symbols-ng/draft-version-symbolFormat.xml	(Arbeitskopie)
@@ -2,7 +2,7 @@
 
 <!-- License: 	GPLv2 or later
      Author: 	Thomas Braun
-     date: 	11 april 2009
+     date: 	8 mai 2009
      description: draft version of the new data format for generating png symbols for kile
 -->
 
@@ -12,7 +12,7 @@
 
 	<!-- define the file format, therefore allow future changes
 	     version 0.20 was added to subversion-->
-	<formatVersion major="0" minor ="21" />
+	<formatVersion major="0" minor ="22" />
 	
 	<!-- This is part of the png filename, e.g. "math" results in img001math.png, img002math.png and so on-->
 	<symbolGroupName>math</symbolGroupName>
@@ -25,11 +25,16 @@
 		<additional>\pagestyle{empty}</additional>
 	</preamble>
 
-	<!--  the package and argument needed for <unicodeCommand> to work -->
-	<unicodeCommandPackage>
-	    <name>inputenc</name>
-	    <arguments>utf8x</arguments>
-	</unicodeCommandPackage>
+	<!--  the packages needed for <unicodeCommand> to work -->
+	<unicodeCommandPackages>
+	    <package>
+	       <name>inputenc</name>
+	       <arguments>utf8x</arguments>
+	    </package>
+	    <package>
+	       <name>ucs</name>
+	    </package>
+	</unicodeCommandPackages>
 	
 	<!-- define the command for which the png should be created, only <latexCommand> is mandatory-->
 	<commandDefinition>
@@ -55,7 +60,9 @@
 		<unicodeCommand>≠</unicodeCommand>
 		<imageCommand>\neq</imageCommand>
 		<mathMode>true</mathMode>
-		<comment>This command gives nice weather!</comment>
+		<comment>This command gives nice weather! And one can use 
+		any fancy UTF-8 characters like ä,ö,ü,ß or even Берлин. 8 мая and 了防疫第.
+		Even HTML markup like &lt;b&gt; bold &lt;/b&gt; is possible.</comment>
 		<package>
 			<name>amsmath</name>
 			<arguments>fleqn</arguments>
Index: ../src/data/CMakeLists.txt
===================================================================
--- ../src/data/CMakeLists.txt	(Revision 965181)
+++ ../src/data/CMakeLists.txt	(Arbeitskopie)
@@ -4,4 +4,5 @@
 ADD_SUBDIRECTORY( icons )
 ADD_SUBDIRECTORY( pics )
 ADD_SUBDIRECTORY( symbols )
+ADD_SUBDIRECTORY( symbols-ng )
 ADD_SUBDIRECTORY( templates )
Index: ../src/CMakeLists.txt
===================================================================
--- ../src/CMakeLists.txt	(Revision 963971)
+++ ../src/CMakeLists.txt	(Arbeitskopie)
@@ -31,6 +31,7 @@
 	dialogs/quickdocumentdialog.cpp
 	widgets/filebrowserwidget.cpp
 	docpart.cpp
+	symbolviewclasses.h
 	kile.cpp
 	main.cpp
 	kileactions.cpp
Index: ../src/kile.cpp
===================================================================
--- ../src/kile.cpp	(Revision 963971)
+++ ../src/kile.cpp	(Arbeitskopie)
@@ -88,6 +88,7 @@
 #include "scriptmanager.h"
 #include "widgets/previewwidget.h"
 #include "widgets/extendedscrollarea.h"
+#include "symbolviewclasses.h"
 
 #define LOG_TAB     0
 #define OUTPUT_TAB  1
@@ -471,58 +472,58 @@
 	m_symbolViewMFUS = new KileWidget::SymbolView(m_toolBox, KileWidget::SymbolView::MFUS);
 	m_toolBox->addItem(m_symbolViewMFUS,i18n("Most Frequently Used"));
 	m_toolBox->setItemEnabled(m_toolBox->indexOf(m_symbolViewMFUS),false);
-	connect(m_symbolViewMFUS, SIGNAL(insertText(const QString& ,const QStringList&)),
-		this, SLOT(insertText(const QString& ,const QStringList&)));
+	connect(m_symbolViewMFUS, SIGNAL(insertText(const QString& ,const QList<Package>&)),
+		this, SLOT(insertText(const QString& ,const QList<Package>&)));
 	
 	m_symbolViewRelation = new KileWidget::SymbolView(m_toolBox, KileWidget::SymbolView::Relation);
 	m_toolBox->addItem(m_symbolViewRelation,SmallIcon("math1"),i18n("Relation"));
-	connect(m_symbolViewRelation, SIGNAL(insertText(const QString& ,const QStringList&)),
-		 this, SLOT(insertText(const QString& ,const QStringList&)));
+	connect(m_symbolViewRelation, SIGNAL(insertText(const QString& ,const QList<Package>&)),
+		 this, SLOT(insertText(const QString& ,const QList<Package>&)));
 		
 	m_symbolViewOperators = new KileWidget::SymbolView(m_toolBox, KileWidget::SymbolView::Operator);
 	m_toolBox->addItem(m_symbolViewOperators,SmallIcon("math2"),i18n("Operators"));
-	connect(m_symbolViewOperators, SIGNAL(insertText(const QString& ,const QStringList&)),
-		this, SLOT(insertText(const QString& ,const QStringList&)));
+	connect(m_symbolViewOperators, SIGNAL(insertText(const QString& ,const QList<Package>&)),
+		this, SLOT(insertText(const QString& ,const QList<Package>&)));
 
 	m_symbolViewArrows = new KileWidget::SymbolView(m_toolBox, KileWidget::SymbolView::Arrow);
 	m_toolBox->addItem(m_symbolViewArrows,SmallIcon("math3"),i18n("Arrows"));
-	connect(m_symbolViewArrows, SIGNAL(insertText(const QString& ,const QStringList&)),
-		this, SLOT(insertText(const QString& ,const QStringList&)));
+	connect(m_symbolViewArrows, SIGNAL(insertText(const QString& ,const QList<Package>&)),
+		this, SLOT(insertText(const QString& ,const QList<Package>&)));
 
 	m_symbolViewMiscMath = new KileWidget::SymbolView(m_toolBox, KileWidget::SymbolView::MiscMath);
 	m_toolBox->addItem(m_symbolViewMiscMath,SmallIcon("math4"),i18n("Miscellaneous Math"));
-	connect(m_symbolViewMiscMath, SIGNAL(insertText(const QString& ,const QStringList&)),
-		this, SLOT(insertText(const QString& ,const QStringList&)));
+	connect(m_symbolViewMiscMath, SIGNAL(insertText(const QString& ,const QList<Package>&)),
+		this, SLOT(insertText(const QString& ,const QList<Package>&)));
 
 	m_symbolViewMiscText = new KileWidget::SymbolView(m_toolBox, KileWidget::SymbolView::MiscText);
 	m_toolBox->addItem(m_symbolViewMiscText,SmallIcon("math5"),i18n("Miscellaneous Text"));
-	connect(m_symbolViewMiscText, SIGNAL(insertText(const QString& ,const QStringList&)),
-		this, SLOT(insertText(const QString& ,const QStringList&)));
+	connect(m_symbolViewMiscText, SIGNAL(insertText(const QString& ,const QList<Package>&)),
+		this, SLOT(insertText(const QString& ,const QList<Package>&)));
 
 	m_symbolViewDelimiters= new KileWidget::SymbolView(m_toolBox, KileWidget::SymbolView::Delimiters);
 	m_toolBox->addItem(m_symbolViewDelimiters,SmallIcon("math6"),i18n("Delimiters"));
-	connect(m_symbolViewDelimiters, SIGNAL(insertText(const QString& ,const QStringList&)),
-		this, SLOT(insertText(const QString& ,const QStringList&)));
+	connect(m_symbolViewDelimiters, SIGNAL(insertText(const QString& ,const QList<Package>&)),
+		this, SLOT(insertText(const QString& ,const QList<Package>&)));
 
 	m_symbolViewGreek = new KileWidget::SymbolView(m_toolBox, KileWidget::SymbolView::Greek);
 	m_toolBox->addItem(m_symbolViewGreek,SmallIcon("math7"),i18n("Greek"));
-	connect(m_symbolViewGreek, SIGNAL(insertText(const QString&, const QStringList&)),
-		this, SLOT(insertText(const QString&, const QStringList&)));
+	connect(m_symbolViewGreek, SIGNAL(insertText(const QString& ,const QList<Package>&)),
+		 this, SLOT(insertText(const QString& ,const QList<Package>&)));
 
 	m_symbolViewSpecial = new KileWidget::SymbolView(m_toolBox, KileWidget::SymbolView::Special);
 	m_toolBox->addItem(m_symbolViewSpecial,SmallIcon("math8"),i18n("Special Characters"));
-	connect(m_symbolViewSpecial, SIGNAL(insertText(const QString& ,const QStringList&)),
-		this, SLOT(insertText(const QString&, const QStringList&)));
+	connect(m_symbolViewSpecial, SIGNAL(insertText(const QString& ,const QList<Package>&)),
+		 this, SLOT(insertText(const QString& ,const QList<Package>&)));
 
 	m_symbolViewCyrillic = new KileWidget::SymbolView(m_toolBox, KileWidget::SymbolView::Cyrillic);
 	m_toolBox->addItem(m_symbolViewCyrillic,SmallIcon("math10"),i18n("Cyrillic Characters"));
-	connect(m_symbolViewCyrillic, SIGNAL(insertText(const QString& ,const QStringList&)),
-		this, SLOT(insertText(const QString&, const QStringList&)));
+	connect(m_symbolViewCyrillic, SIGNAL(insertText(const QString& ,const QList<Package>&)),
+		 this, SLOT(insertText(const QString& ,const QList<Package>&)));
 
 	m_symbolViewUser = new KileWidget::SymbolView(m_toolBox, KileWidget::SymbolView::User);
 	m_toolBox->addItem(m_symbolViewUser,SmallIcon("math9"),i18n("User Defined"));
-	connect(m_symbolViewUser, SIGNAL(insertText(const QString&, const QStringList&)),
-		this, SLOT(insertText(const QString&, const QStringList& )));
+	connect(m_symbolViewUser, SIGNAL(insertText(const QString& ,const QList<Package>&)),
+		 this, SLOT(insertText(const QString& ,const QList<Package>&)));
 
 	for(int i = 0; i < m_toolBox->count(); ++i) {
 		m_toolBox->setItemToolTip(i, i18n("Move the mouse over the icons to see the corresponding LaTeX commands.<br>\
@@ -2066,6 +2067,22 @@
 	insertTag(data, QStringList("amsmath"));
 }
 
+void Kile::insertTag(const KileAction::TagData& data,const QList<Package> &pkgs){
+
+   QStringList packages;
+   QString pkgName;
+
+   QList<Package>::const_iterator it;
+   for(it = pkgs.begin(); it != pkgs.end() ; it++){
+	 pkgName = (*it).name;
+	 if(!pkgName.isEmpty()){
+	    packages.append(pkgName);
+	 }
+   }
+   
+   insertTag(data,packages);
+}
+
 void Kile::insertTag(const KileAction::TagData& data,const QStringList &pkgs)
 {
 	KILE_DEBUG() << "void Kile::insertTag(const KileAction::TagData& data,const QStringList " << pkgs.join(",") << ")" << endl;
@@ -2104,6 +2121,11 @@
 	insertTag(KileAction::TagData(QString(), text, "%C", 0, 0), pkgs);
 }
 
+void Kile::insertText(const QString &text, const QList<Package> &pkgs)
+{
+   insertTag(KileAction::TagData(QString(), text, "%C", 0, 0), pkgs);
+}
+
 void Kile::quickDocument()
 {
 	KileDialog::QuickDocument *dlg = new KileDialog::QuickDocument(m_config.data(), m_mainWindow, "Quick Start", i18n("Quick Start"));
